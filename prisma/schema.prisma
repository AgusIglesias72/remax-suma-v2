// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USUARIOS Y AUTENTICACIÓN ====================

model User {
  id                String      @id @default(cuid())
  email             String      @unique
  emailVerified     DateTime?
  clerkId           String?     @unique // ID de Clerk
  role              UserRole    @default(CLIENT)
  status            UserStatus  @default(ACTIVE)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  
  // Relaciones
  profile           Profile?
  properties        Property[]  @relation("PropertyAgent") // Solo para agentes
  favoriteLists     FavoriteList[]
  savedSearches     SavedSearch[]
  inquiries         Inquiry[]   @relation("UserInquiries")
  agentInquiries    Inquiry[]   @relation("AgentInquiries")
  propertyViews     PropertyView[]
  notifications     Notification[]
  
  // Relaciones de agente
  agencyId          String?
  agency            Agency?     @relation(fields: [agencyId], references: [id])
  teamId            String?
  team              Team?       @relation(fields: [teamId], references: [id])
  assignedLeads     Lead[]      @relation("AssignedAgent")
  commissions       Commission[] @relation("AgentCommissions")
  
  @@index([email])
  @@index([clerkId])
  @@index([role])
  @@index([agencyId])
}

enum UserRole {
  CLIENT
  AGENT
  TEAM_LEADER
  OFFICE_MANAGER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model Profile {
  id                String      @id @default(cuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id])
  
  // Información personal
  firstName         String
  lastName          String
  phone             String?
  phoneVerified     Boolean     @default(false)
  secondaryPhone    String?
  profileImage      String?
  bio               String?     // Para agentes
  
  // Documentos
  documentType      DocumentType?
  documentNumber    String?
  documentVerified  Boolean     @default(false)
  
  // Preferencias
  contactPreference ContactMethod @default(EMAIL)
  language          String      @default("es")
  timezone          String      @default("America/Argentina/Buenos_Aires")
  
  // Datos de agente
  licenseNumber     String?     // Matrícula profesional
  specializations   String[]    // Tipos de propiedades que maneja
  areasOfOperation  String[]    // Zonas donde opera
  yearsOfExperience Int?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([documentNumber])
}

// ==================== PROPIEDADES ====================

model Property {
  id                String      @id @default(cuid())
  code              String      @unique // Código único visible
  slug              String      @unique // URL amigable
  status            PropertyStatus @default(DRAFT)
  
  // Información básica
  title             String
  description       String      @db.Text
  operationType     OperationType
  propertyType      PropertyType
  propertySubtype   String?     // Subtipo específico
  
  // Relaciones
  agentId           String
  agent             User        @relation("PropertyAgent", fields: [agentId], references: [id])
  agencyId          String?
  agency            Agency?     @relation(fields: [agencyId], references: [id])
  buildingId        String?
  building          Building?   @relation(fields: [buildingId], references: [id])
  
  // Componentes
  location          PropertyLocation?
  prices            PropertyPrice[]
  images            PropertyImage[]
  features          PropertyFeature[]
  
  // Interacciones
  views             PropertyView[]
  inquiries         Inquiry[]
  favoriteItems     FavoriteItem[]
  commissions       Commission[]
  
  // Metadata
  publishedAt       DateTime?
  featuredUntil     DateTime?   // Para destacados
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // SEO
  metaTitle         String?
  metaDescription   String?
  
  @@index([status])
  @@index([operationType])
  @@index([propertyType])
  @@index([agentId])
  @@index([publishedAt])
  @@index([slug])
}

model PropertyLocation {
  id                String      @id @default(cuid())
  propertyId        String      @unique
  property          Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Dirección
  country           String      @default("Argentina")
  province          String
  city              String
  neighborhood      String
  subNeighborhood   String?
  street            String
  streetNumber      String
  floor             String?
  apartment         String?
  postalCode        String?
  
  // Coordenadas
  latitude          Float
  longitude         Float
  
  // Información adicional
  hideExactAddress  Boolean     @default(false)
  transportNearby   Json?       // Array de transportes cercanos
  poisNearby        Json?       // Points of interest
  
  @@index([city])
  @@index([neighborhood])
  @@index([latitude, longitude])
}

model PropertyPrice {
  id                String      @id @default(cuid())
  propertyId        String
  property          Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  amount            Decimal     @db.Decimal(12, 2)
  currency          Currency    @default(ARS)
  
  // Para alquileres
  expensesAmount    Decimal?    @db.Decimal(10, 2)
  
  // Historial
  validFrom         DateTime    @default(now())
  validTo           DateTime?
  isActive          Boolean     @default(true)
  
  createdAt         DateTime    @default(now())
  
  @@index([propertyId])
  @@index([isActive])
}

model PropertyFeature {
  id                String      @id @default(cuid())
  propertyId        String
  property          Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  category          FeatureCategory
  
  // Características generales
  totalArea         Float?      // m² totales
  coveredArea       Float?      // m² cubiertos
  rooms             Int?        // Ambientes
  bedrooms          Int?
  bathrooms         Int?
  toilettes         Int?
  
  // Características específicas
  garages           Int?
  garageType        String?     // Cubierta, Descubierta
  
  // Amenities (almacenado como JSON array)
  amenities         Json?       // ["pool", "gym", "security24h"]
  
  // Estado y antigüedad
  condition         PropertyCondition?
  age               Int?        // Años de antigüedad
  orientation       String?     // Norte, Sur, Este, Oeste
  
  // Otros datos estructurados
  customFeatures    Json?       // Para features no estándar
  
  @@index([propertyId])
}

model PropertyImage {
  id                String      @id @default(cuid())
  propertyId        String
  property          Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  url               String
  altText           String?
  caption           String?
  order             Int         @default(0)
  isMain            Boolean     @default(false)
  
  // Metadata de imagen
  width             Int?
  height            Int?
  fileSize          Int?
  format            String?     // webp, jpg, png
  
  createdAt         DateTime    @default(now())
  
  @@index([propertyId])
  @@index([isMain])
}

model Building {
  id                String      @id @default(cuid())
  name              String
  description       String?     @db.Text
  
  // Ubicación
  address           String
  latitude          Float
  longitude         Float
  
  // Información del edificio
  floors            Int?
  units             Int?
  yearBuilt         Int?
  architect         String?
  
  // Amenities del edificio
  amenities         Json?
  
  // Relaciones
  properties        Property[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([latitude, longitude])
}

// ==================== FAVORITOS Y BÚSQUEDAS ====================

model FavoriteList {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  name              String
  description       String?
  isDefault         Boolean     @default(false)
  
  items             FavoriteItem[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@unique([userId, name])
  @@index([userId])
}

model FavoriteItem {
  id                String      @id @default(cuid())
  listId            String
  list              FavoriteList @relation(fields: [listId], references: [id], onDelete: Cascade)
  propertyId        String
  property          Property    @relation(fields: [propertyId], references: [id])
  
  notes             String?     @db.Text // Notas privadas del usuario
  addedAt           DateTime    @default(now())
  
  @@unique([listId, propertyId])
  @@index([propertyId])
}

model SavedSearch {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  name              String
  filters           Json        // Todos los filtros de búsqueda
  
  // Configuración de alertas
  alertEnabled      Boolean     @default(true)
  alertFrequency    AlertFrequency @default(DAILY)
  lastAlertSent     DateTime?
  
  alerts            SearchAlert[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([userId])
  @@index([alertEnabled])
}

model SearchAlert {
  id                String      @id @default(cuid())
  searchId          String
  search            SavedSearch @relation(fields: [searchId], references: [id], onDelete: Cascade)
  
  propertyId        String
  sentAt            DateTime    @default(now())
  
  @@index([searchId])
}

// ==================== LEADS Y CRM ====================

model Lead {
  id                String      @id @default(cuid())
  
  // Información básica
  firstName         String
  lastName          String
  email             String
  phone             String?
  
  // Origen y asignación
  source            LeadSource
  sourceDetails     Json?       // UTMs, campaña, etc
  assignedAgentId   String?
  assignedAgent     User?       @relation("AssignedAgent", fields: [assignedAgentId], references: [id])
  assignedAt        DateTime?
  
  // Estado y calificación
  status            LeadStatus  @default(NEW)
  score             LeadScore?
  
  // Datos de búsqueda
  operationType     OperationType?
  propertyTypes     String[]
  budgetMin         Decimal?    @db.Decimal(12, 2)
  budgetMax         Decimal?    @db.Decimal(12, 2)
  preferredAreas    String[]
  requirements      String?     @db.Text
  
  // Actividad
  interactions      LeadInteraction[]
  propertyViews     LeadPropertyView[]
  commissions       Commission[]
  
  // Metadata
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastContactAt     DateTime?
  
  @@index([email])
  @@index([assignedAgentId])
  @@index([status])
  @@index([createdAt])
}

model LeadScore {
  id                String      @id @default(cuid())
  leadId            String      @unique
  lead              Lead        @relation(fields: [leadId], references: [id])
  
  // Componentes del score
  profileScore      Int         // Completitud del perfil
  engagementScore   Int         // Interacciones
  intentScore       Int         // Señales de intención
  totalScore        Int         // Score total calculado
  
  // Factores considerados
  factors           Json        // Detalle de cómo se calculó
  
  calculatedAt      DateTime    @default(now())
  
  @@index([totalScore])
}

model LeadInteraction {
  id                String      @id @default(cuid())
  leadId            String
  lead              Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  type              InteractionType
  channel           String      // email, phone, whatsapp, etc
  direction         String      // inbound, outbound
  content           String?     @db.Text
  duration          Int?        // En segundos para llamadas
  
  // Metadata
  agentId           String?
  createdAt         DateTime    @default(now())
  
  @@index([leadId])
  @@index([createdAt])
}

model LeadPropertyView {
  id                String      @id @default(cuid())
  leadId            String
  lead              Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  propertyId        String
  
  viewedAt          DateTime    @default(now())
  duration          Int?        // Tiempo en la página
  source            String?     // Cómo llegó a la propiedad
  
  @@index([leadId])
  @@index([propertyId])
}

// ==================== COMUNICACIÓN ====================

model Inquiry {
  id                String      @id @default(cuid())
  
  // Participantes
  userId            String
  user              User        @relation("UserInquiries", fields: [userId], references: [id])
  propertyId        String
  property          Property    @relation(fields: [propertyId], references: [id])
  agentId           String
  agent             User        @relation("AgentInquiries", fields: [agentId], references: [id])
  
  // Estado
  status            InquiryStatus
  statusHistory     Json        // Array de cambios de estado
  
  // Contenido
  initialMessage    String      @db.Text
  messages          InquiryMessage[]
  
  // Metadata
  source            String?     // De dónde vino la consulta
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastMessageAt     DateTime?
  
  @@index([userId])
  @@index([propertyId])
  @@index([agentId])
  @@index([status])
}

model InquiryMessage {
  id                String      @id @default(cuid())
  inquiryId         String
  inquiry           Inquiry     @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  
  senderId          String      // Usuario que envía
  content           String      @db.Text
  attachments       Json?       // URLs de archivos adjuntos
  
  createdAt         DateTime    @default(now())
  readAt            DateTime?
  
  @@index([inquiryId])
  @@index([createdAt])
}

// ==================== AGENCIAS Y EQUIPOS ====================

model Agency {
  id                String      @id @default(cuid())
  name              String
  slug              String      @unique
  
  // Información
  description       String?     @db.Text
  logo              String?
  website           String?
  email             String
  phone             String
  
  // Dirección
  address           Json
  
  // Configuración
  settings          Json        // Configuraciones específicas
  commissionRules   Json        // Reglas de comisión
  
  // Relaciones
  users             User[]
  teams             Team[]
  properties        Property[]
  commissions       Commission[]
  
  // Estado
  status            AgencyStatus @default(ACTIVE)
  verifiedAt        DateTime?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([slug])
}

model Team {
  id                String      @id @default(cuid())
  agencyId          String
  agency            Agency      @relation(fields: [agencyId], references: [id])
  
  name              String
  description       String?
  
  // Líder del equipo
  leaderId          String
  members           User[]
  
  // Configuración
  settings          Json        // Permisos, configuraciones
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([agencyId])
}

// ==================== COMISIONES ====================

model Commission {
  id                String      @id @default(cuid())
  
  // Relaciones
  propertyId        String
  property          Property    @relation(fields: [propertyId], references: [id])
  agentId           String
  agent             User        @relation("AgentCommissions", fields: [agentId], references: [id])
  agencyId          String?
  agency            Agency?     @relation(fields: [agencyId], references: [id])
  leadId            String?
  lead              Lead?       @relation(fields: [leadId], references: [id])
  
  // Montos
  saleAmount        Decimal     @db.Decimal(12, 2)
  commissionRate    Decimal     @db.Decimal(5, 2) // Porcentaje
  grossCommission   Decimal     @db.Decimal(10, 2)
  agentSplit        Decimal     @db.Decimal(5, 2) // Porcentaje para el agente
  netCommission     Decimal     @db.Decimal(10, 2) // Lo que recibe el agente
  
  // Estado
  status            CommissionStatus @default(PROJECTED)
  
  // Fechas importantes
  projectedDate     DateTime
  confirmedDate     DateTime?
  invoicedDate      DateTime?
  paidDate          DateTime?
  
  // Metadata
  notes             String?     @db.Text
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([agentId])
  @@index([status])
  @@index([projectedDate])
}

// ==================== ANALYTICS ====================

model PropertyView {
  id                String      @id @default(cuid())
  propertyId        String
  property          Property    @relation(fields: [propertyId], references: [id])
  
  // Viewer info
  userId            String?     // Null para visitantes anónimos
  user              User?       @relation(fields: [userId], references: [id])
  sessionId         String      // Para tracking anónimo
  ipAddress         String?
  
  // Contexto
  source            String?     // Referrer, UTM source
  device            String?     // Mobile, Desktop, Tablet
  
  // Engagement
  duration          Int?        // Segundos en la página
  interactions      Json?       // Clicks, scrolls, etc
  
  viewedAt          DateTime    @default(now())
  
  @@index([propertyId])
  @@index([userId])
  @@index([viewedAt])
}

// ==================== NOTIFICACIONES ====================

model Notification {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  type              NotificationType
  title             String
  message           String      @db.Text
  data              Json?       // Datos adicionales según el tipo
  
  // Estado
  read              Boolean     @default(false)
  readAt            DateTime?
  
  // Entrega
  channels          String[]    // ["email", "push", "in_app"]
  deliveryStatus    Json        // Estado por canal
  
  createdAt         DateTime    @default(now())
  
  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

// ==================== ENUMS ====================

enum OperationType {
  SALE
  RENT
  TEMPORARY_RENT
  COMMERCIAL_RENT
}

enum PropertyType {
  APARTMENT
  HOUSE
  PH
  LOFT
  COUNTRY_HOUSE
  LAND
  OFFICE
  STORE
  WAREHOUSE
  GARAGE
  BUSINESS
}

enum PropertyStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  PAUSED
  RESERVED
  SOLD
  RENTED
}

enum PropertyCondition {
  NEW
  EXCELLENT
  VERY_GOOD
  GOOD
  REGULAR
  TO_RENOVATE
}

enum Currency {
  ARS
  USD
}

enum FeatureCategory {
  GENERAL
  BUILDING
  UNIT
}

enum LeadSource {
  PORTAL
  FACEBOOK
  INSTAGRAM
  GOOGLE_ADS
  REFERRAL
  WALK_IN
  PHONE
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  VISITING
  NEGOTIATING
  CLOSED_WON
  CLOSED_LOST
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  AWAITING_RESPONSE
  SCHEDULED_VISIT
  CLOSED
}

enum AlertFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

enum CommissionStatus {
  PROJECTED
  CONFIRMED
  INVOICED
  PAID
  CANCELLED
}

enum NotificationType {
  NEW_LEAD
  NEW_INQUIRY
  PRICE_CHANGE
  NEW_MATCH
  VISIT_REMINDER
  COMMISSION_UPDATE
  SYSTEM
}

enum ContactMethod {
  EMAIL
  PHONE
  WHATSAPP
  SMS
}

enum DocumentType {
  DNI
  PASSPORT
  CUIT
}

enum AgencyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InteractionType {
  CALL
  EMAIL
  WHATSAPP
  SMS
  MEETING
  NOTE
}